---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Static Website: combining S3, CloudFront and Route53, CertificateManager'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentZoneStack
      # - ParentAlertStack
      # - ParentS3StackAccessLog
    # - Label:
    #     default: 'Lambda@Edge Parameters'
    #   Parameters:
    #   - ViewerRequestLambdaEdgeFunctionVersionARN
    #   - OriginRequestLambdaEdgeFunctionVersionARN
    #   - OriginResponseLambdaEdgeFunctionVersionARN
    #   - ViewerResponseLambdaEdgeFunctionVersionARN
    - Label:
        default: 'CloudFront Parameters'
      Parameters:
      - DefaultRootObject
      - DefaultErrorPagePath
    - Label:
        default: 'DNS Parameters'
      Parameters:
      - SubDomainNameWithDot
      - EnableRedirectSubDomainName
      - RedirectSubDomainNameWithDot
    - Label:
        default: 'SSL/TLS Parameters'
      Parameters:
      - CertificateType
      - ExistingCertificate
Parameters:
  ParentZoneStack:
    Description: 'Stack name of parent zone stack based on vpc/zone-*.yaml template.'
    Type: String
  # ParentAlertStack:
  #   Description: 'Optional but recommended stack name of parent alert stack based on operations/alert.yaml template.'
  #   Type: String
  #   Default: ''
  # ParentS3StackAccessLog:
  #   Description: 'Optional stack name of parent s3 stack based on state/s3.yaml template (with Access set to ElbAccessLogWrite) to store access logs.'
  #   Type: String
  #   Default: ''
  SubDomainNameWithDot:
    Description: 'Primary name that is used to create the DNS entry with trailing dot, e.g. ?{SubDomainNameWithDot}?{HostedZoneName}. Leave blank for naked (or apex and bare) domain.'
    Type: String
    Default: 'www.'
  # ViewerRequestLambdaEdgeFunctionVersionARN: # max 5s timeout
  #   Description: 'Optional version ARN of Lambda@Edge viewer request function (e.g., ViewerRequestLambdaEdgeFunctionVersionARN output of static-website/lambdaedge-index-document.yaml).'
  #   Type: String
  #   Default: ''
  # OriginRequestLambdaEdgeFunctionVersionARN: # max 30s timeout
  #   Description: 'Optional version ARN of Lambda@Edge origin request function.'
  #   Type: String
  #   Default: ''
  # OriginResponseLambdaEdgeFunctionVersionARN: # max 30s timeout
  #   Description: 'Optional version ARN of Lambda@Edge origin response function.'
  #   Type: String
  #   Default: ''
  # ViewerResponseLambdaEdgeFunctionVersionARN: # max 5s timeout
  #   Description: 'Optional version ARN of Lambda@Edge viewer response function.'
  #   Type: String
  #   Default: ''
  DefaultRootObject:
    Description: 'Optional name of the index document for the website (e.g., index.html).'
    Type: String
    Default: 'index.html'
  DefaultErrorPagePath:
    Description: 'Optional path of the error page for the website (e.g. /error.html).'
    Type: String
    Default: ''
  # EnableRedirectSubDomainName:
  #   Description: 'Sometimes, you want one (sub)domain to redirect to the primary name. E.g., if your primary website is www.widdix.net, you want widdix.net to redirect to www.widdix.net.'
  #   Type: String
  #   Default: 'false'
  #   AllowedValues: ['true', 'false']
  # RedirectSubDomainNameWithDot:
  #   Description: 'Optional name that is used to create the DNS entry with trailing dot, e.g. ?{RedirectSubDomainNameWithDot}?{HostedZoneName}. Leave blank for naked (or apex and bare) domain.'
  #   Type: String
  #   Default: ''
  CertificateType:
    Description: 'Indicates whether to use the certificate from the AWS Certificate Manager or AWS Identity and Access Management. CreateAcmCertificate only works in the us-east-1 region!'
    Type: String
    Default: IamCertificateId
    AllowedValues:
    - AcmCertificateArn
    - IamCertificateId
    - CreateAcmCertificate
  ExistingCertificate:
    Description: 'Optional ACM Certificate ARN or IAM Certificate ID. Certificate must be created in the us-east-1 region!'
    Type: String
    Default: ''
Conditions:
  # HasS3Bucket: !Not [!Equals [!Ref ParentS3StackAccessLog, '']]
  # HasRedirectDomainName: !Equals [!Ref EnableRedirectSubDomainName, 'true']
  HasAcmCertificateArn: !Equals [!Ref CertificateType, 'AcmCertificateArn']
  HasIamCertificateId: !Equals [!Ref CertificateType, 'IamCertificateId']
  HasCreateAcmCertificate: !Equals [!Ref CertificateType, 'CreateAcmCertificate']
  # HasViewerRequestLambdaEdgeFunctionVersionARN: !Not [!Equals [!Ref ViewerRequestLambdaEdgeFunctionVersionARN, '']]
  # HasOriginRequestLambdaEdgeFunctionVersionARN: !Not [!Equals [!Ref OriginRequestLambdaEdgeFunctionVersionARN, '']]
  # HasOriginResponseLambdaEdgeFunctionVersionARN: !Not [!Equals [!Ref OriginResponseLambdaEdgeFunctionVersionARN, '']]
  # HasViewerResponseLambdaEdgeFunctionVersionARN: !Not [!Equals [!Ref ViewerResponseLambdaEdgeFunctionVersionARN, '']]
  HasDefaultRootObject: !Not [!Equals [!Ref DefaultRootObject, '']]
  HasDefaultErrorPagePath: !Not [!Equals [!Ref DefaultErrorPagePath, '']]
  # HasAlertTopic: !Not [!Equals [!Ref ParentAlertStack, '']]
  HasRegionNorthVirginia: !Equals [!Ref 'AWS::Region', 'us-east-1']
  # HasAlertTopicAndRegionNorthVirginia: !And [!Condition HasAlertTopic, !Condition HasRegionNorthVirginia]
Resources:
  Certificate:
    Condition: HasCreateAcmCertificate
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: !Sub
      - '${SubDomainNameWithDot}${HostedZoneName}'
      - SubDomainNameWithDot: !Ref SubDomainNameWithDot
        HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
      DomainValidationOptions:
      - - DomainName: !Sub
          - '${SubDomainNameWithDot}${HostedZoneName}'
          - SubDomainNameWithDot: !Ref SubDomainNameWithDot
            HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
          ValidationDomain: !Sub
          - '${SubDomainNameWithDot}${HostedZoneName}'
          - SubDomainNameWithDot: !Ref SubDomainNameWithDot
            HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
      #   - DomainName: !Sub
      #     - '${RedirectSubDomainNameWithDot}${HostedZoneName}'
      #     - RedirectSubDomainNameWithDot: !Ref RedirectSubDomainNameWithDot
      #       HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
      #     ValidationDomain: !Sub
      #     - '${SubDomainNameWithDot}${HostedZoneName}'
      #     - SubDomainNameWithDot: !Ref SubDomainNameWithDot
      #       HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
      # - - DomainName: !Sub
      #     - '${SubDomainNameWithDot}${HostedZoneName}'
      #     - SubDomainNameWithDot: !Ref SubDomainNameWithDot
      #       HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
      #     ValidationDomain: !Sub
      #     - '${SubDomainNameWithDot}${HostedZoneName}'
      #     - SubDomainNameWithDot: !Ref SubDomainNameWithDot
      #       HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
      # SubjectAlternativeNames: !If
      # - HasRedirectDomainName
      # - - !Sub
      #     - '${RedirectSubDomainNameWithDot}${HostedZoneName}'
      #     - RedirectSubDomainNameWithDot: !Ref RedirectSubDomainNameWithDot
      #       HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
      # - []
  JekyllBlogBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub
      - '${SubDomainNameWithDot}${HostedZoneName}'
      - SubDomainNameWithDot: !Ref SubDomainNameWithDot
        HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Ref 'AccessLogDeliveryBucket'
        LogFilePrefix: jekyllblogbucket-logs
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: JekyllBucketPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref JekyllBlogBucket
                - /*
      Bucket: !Ref JekyllBlogBucket
  AccessLogDeliveryBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref AccessLogDeliveryBucket
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
  Route53RecordV2:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneId'}
      RecordSets:
      - Name: !Sub
        - '${SubDomainNameWithDot}${HostedZoneName}'
        - SubDomainNameWithDot: !Ref SubDomainNameWithDot
          HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
        Type: A
        AliasTarget:
          # HostedZoneId: Z2FDTNDATAQYW2 # Magic CloudFront number
          DNSName: !GetAtt 'JekyllBlogBucket.WebsiteURL'
  Route53RecordIPv6:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneId'}
      RecordSets:
      - Name: !Sub
        - '${SubDomainNameWithDot}${HostedZoneName}'
        - SubDomainNameWithDot: !Ref SubDomainNameWithDot
          HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
        Type: AAAA
        AliasTarget:
          # HostedZoneId: Z2FDTNDATAQYW2 # Magic CloudFront number
          DNSName: !GetAtt 'JekyllBlogBucket.WebsiteURL'
Outputs:
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  BucketName:
    Description: 'Name of the S3 bucket storing the static files.'
    Value: !Ref S3Bucket
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'
  URL:
    Description: 'URL to static website.'
    Value: !Sub
    - 'https://${SubDomainNameWithDot}${HostedZoneName}'
    - SubDomainNameWithDot: !Ref SubDomainNameWithDot
      HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
    Export:
      Name: !Sub '${AWS::StackName}-URL'
  