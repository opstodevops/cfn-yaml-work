---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Static Website: combining S3, Route53 and CertificateManager'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentZoneStack
      - LogDeliveryBucketName
    - Label:
        default: 'CloudFront Parameters'
      Parameters:
      - DefaultRootObject
      - DefaultErrorPagePath
    - Label:
        default: 'DNS Parameters'
      Parameters:
      - SubDomainNameWithDot
      - EnableRedirectSubDomainName
      - RedirectSubDomainNameWithDot
    - Label:
        default: 'SSL/TLS Parameters'
      Parameters:
      - CertificateType
      - ExistingCertificate
Parameters:
  ParentZoneStack:
    Description: 'Stack name of parent zone stack based on vpc/zone-*.yaml template.'
    Type: String
  LogDeliveryBucketName:
    Description: 'Enter a name for Access Log bucket'
    Type: String
  SubDomainNameWithDot:
    Description: 'Primary name that is used to create the DNS entry with trailing dot, e.g. ?{SubDomainNameWithDot}?{HostedZoneName}. Leave blank for naked (or apex and bare) domain.'
    Type: String
    Default: 'www.'
  CertificateType:
    Description: 'Indicates whether to use the certificate from the AWS Certificate Manager or AWS Identity and Access Management. CreateAcmCertificate only works in the us-east-1 region!'
    Type: String
    Default: IamCertificateId
    AllowedValues:
    - AcmCertificateArn
    - IamCertificateId
    - CreateAcmCertificate
  ExistingCertificate:
    Description: 'Optional ACM Certificate ARN or IAM Certificate ID. Certificate must be created in the us-east-1 region!'
    Type: String
    Default: ''
Conditions:
  HasAcmCertificateArn: !Equals [!Ref CertificateType, 'AcmCertificateArn']
  HasIamCertificateId: !Equals [!Ref CertificateType, 'IamCertificateId']
  HasCreateAcmCertificate: !Equals [!Ref CertificateType, 'CreateAcmCertificate']
  HasRegionNorthVirginia: !Equals [!Ref 'AWS::Region', 'us-east-1']
Resources:
  JekyllBlogBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub
      - '${SubDomainNameWithDot}${HostedZoneName}'
      - SubDomainNameWithDot: !Ref SubDomainNameWithDot
        HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Ref 'LogDeliveryBucket'
        LogFilePrefix: jekyllblogbucket-logs
  JekyllBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: JekyllBucketPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref JekyllBlogBucket
                - /*
      Bucket: !Ref JekyllBlogBucket
  LogDeliveryBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref LogDeliveryBucketName
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
  Certificate:
    Condition: HasCreateAcmCertificate
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: !Sub
      - '${SubDomainNameWithDot}${HostedZoneName}'
      - SubDomainNameWithDot: !Ref SubDomainNameWithDot
        HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
      DomainValidationOptions:
      - - DomainName: !Sub
          - '${SubDomainNameWithDot}${HostedZoneName}'
          - SubDomainNameWithDot: !Ref SubDomainNameWithDot
            HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
          ValidationDomain: !Sub
          - '${SubDomainNameWithDot}${HostedZoneName}'
          - SubDomainNameWithDot: !Ref SubDomainNameWithDot
            HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
  Route53RecordV2:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneId'}
      RecordSets:
      - Name: !Sub
        - '${SubDomainNameWithDot}${HostedZoneName}'
        - SubDomainNameWithDot: !Ref SubDomainNameWithDot
          HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
        Type: A
        # AliasTarget:
        #   HostedZoneId: Z2FDTNDATAQYW2 # Magic CloudFront number
        #   DNSName: !GetAtt 'JekyllBlogBucket.DomainName'
  Route53RecordIPv6:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneId'}
      RecordSets:
      - Name: !Sub
        - '${SubDomainNameWithDot}${HostedZoneName}'
        - SubDomainNameWithDot: !Ref SubDomainNameWithDot
          HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
        Type: AAAA
        # AliasTarget:
        #   HostedZoneId: Z2FDTNDATAQYW2 # Magic CloudFront number
        #   DNSName: !GetAtt 'JekyllBlogBucket.DomainName'
Outputs:
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  BucketName:
    Description: 'Name of the S3 bucket storing the static files.'
    Value: !Ref JekyllBlogBucket
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'
  URL:
    Description: 'URL to static website.'
    Value: !Sub
    - 'https://${SubDomainNameWithDot}${HostedZoneName}'
    - SubDomainNameWithDot: !Ref SubDomainNameWithDot
      HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
    Export:
      Name: !Sub '${AWS::StackName}-URL'
  